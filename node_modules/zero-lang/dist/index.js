var zeroLang =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var arrayUtils = __webpack_require__(1);
	var GLOBAL = __webpack_require__(4);
	var numberUtils = __webpack_require__(3);
	var objectUtils = __webpack_require__(5);
	var stringUtils = __webpack_require__(6);
	var typeUtils = __webpack_require__(2);
	
	module.exports = objectUtils.extend({
	  global: GLOBAL
	}, arrayUtils, numberUtils, objectUtils, stringUtils, typeUtils);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var checkType = __webpack_require__(2);
	var numberUtils = __webpack_require__(3);
	
	var isArray = checkType.isArray;
	var AP = Array.prototype;
	var slice = AP.slice;
	
	function isArrayLike(arr) {
	  return (typeof arr === 'undefined' ? 'undefined' : _typeof(arr)) === 'object' && numberUtils.isFinite(arr.length);
	}
	function toArray(arr) {
	  return isArrayLike(arr) ? slice.call(arr) : [];
	}
	
	function arrayFromSecondElement(arr) {
	  return slice.call(arr, 1);
	}
	function applyNativeFunction(nativeFunction, target, args) {
	  return nativeFunction.apply(target, arrayFromSecondElement(args));
	}
	
	// index
	var index = function index(up) {
	  return function (arr, searchElement, fromIndex) {
	    var i = void 0;
	    var len = arr.length >>> 0;
	    if (len === 0) {
	      return -1;
	    }
	    if (!fromIndex) {
	      fromIndex = up ? 0 : arr.length;
	    } else if (fromIndex < 0) {
	      fromIndex = Math.max(0, arr.length + fromIndex);
	    }
	    if (up) {
	      for (i = fromIndex; i < arr.length; i++) {
	        if (arr[i] === searchElement) {
	          return i;
	        }
	      }
	    } else {
	      for (i = fromIndex; i >= 0; i--) {
	        if (arr[i] === searchElement) {
	          return i;
	        }
	      }
	    }
	    return -1;
	  };
	};
	var indexOf = AP.indexOf ? function indexOf(arr) {
	  return applyNativeFunction(AP.indexOf, arr, arguments);
	} : index(true);
	var lastIndexOf = AP.lastIndexOf ? function lastIndexOf(arr) {
	  return applyNativeFunction(AP.lastIndexOf, arr, arguments);
	} : index();
	
	// each
	var each = AP.forEach ? function each(arr /* , callback, thisObj */) {
	  applyNativeFunction(AP.forEach, arr, arguments);
	} : function each(arr, callback, thisObj) {
	  var a = toArray(arr);
	  for (var i = 0; i < a.length; i++) {
	    callback.call(thisObj, a[i], i, arr);
	  }
	};
	
	// every
	var every = AP.every ? function every(arr) {
	  return applyNativeFunction(AP.every, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var a = toArray(arr);
	  for (var i = 0; i < a.length; i++) {
	    if (!callback.call(thisObj, a[i], i, arr)) {
	      return false;
	    }
	  }
	  return true;
	};
	
	// filter
	var filter = AP.filter ? function filter(arr) {
	  return applyNativeFunction(AP.filter, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var res = [];
	  each(arr, function (element, key) {
	    if (callback.call(thisObj, element, key, arr)) {
	      res.push(element);
	    }
	  });
	  return res;
	};
	
	// map
	var map = AP.map ? function map(arr) {
	  return applyNativeFunction(AP.map, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var res = [];
	  each(arr, function (element, key) {
	    res.push(callback.call(thisObj, element, key, arr));
	  });
	  return res;
	};
	
	// some
	var some = AP.some ? function some(arr) {
	  return applyNativeFunction(AP.some, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var i = void 0;
	  for (i = 0; i < arr.length; i++) {
	    if (callback.call(thisObj, arr[i], i, arr)) {
	      return true;
	    }
	  }
	  return false;
	};
	
	// reduce
	var reduce = AP.reduce ? function reduce(arr) {
	  return applyNativeFunction(AP.reduce, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var value = void 0;
	  if (thisObj) {
	    value = thisObj;
	  }
	  for (var i = 0; i < arr.length; i++) {
	    if (value) {
	      value = callback(value, arr[i], i, arr);
	    } else {
	      value = arr[i];
	    }
	  }
	  return value;
	};
	
	// reduceRight
	var reduceRight = AP.reduceRight ? function reduceRight(arr) {
	  return applyNativeFunction(AP.reduceRight, arr, arguments);
	} : function (arr, callback, thisObj) {
	  var value = void 0;
	  if (thisObj) {
	    value = thisObj;
	  }
	  for (var i = arr.length - 1; i >= 0; i--) {
	    if (value) {
	      value = callback(value, arr[i], i, arr);
	    } else {
	      value = arr[i];
	    }
	  }
	  return value;
	};
	
	// contains
	function contains(arr, value) {
	  return indexOf(toArray(arr), value) > -1;
	}
	
	// uniq
	function uniq(arr) {
	  var resultArr = [];
	  each(arr, function (element) {
	    if (!contains(resultArr, element)) {
	      resultArr.push(element);
	    }
	  });
	  return resultArr;
	}
	
	// flatten
	function flatten(arr) {
	  var a = toArray(arr);
	  var r = [];
	  for (var i = 0, l = a.length; i < l; ++i) {
	    if (isArrayLike(a[i])) {
	      r = r.concat(a[i]);
	    } else {
	      r[r.length] = a[i];
	    }
	  }
	  return r;
	}
	
	var arrayUtils = {
	  contains: contains,
	  each: each,
	  every: every,
	  filter: filter,
	  flatten: flatten,
	  index: index,
	  indexOf: indexOf,
	  isArray: isArray,
	  isArrayLike: isArrayLike,
	  lastIndexOf: lastIndexOf,
	  map: map,
	  reduce: reduce,
	  reduceRight: reduceRight,
	  some: some,
	  toArray: toArray,
	  uniq: uniq,
	  forEach: each,
	  difference: function difference(arr) {
	    var rest = flatten(arrayFromSecondElement(arguments));
	    return filter(arr, function (value) {
	      return !contains(rest, value);
	    });
	  },
	  eachReverse: function eachReverse(arr, callback, thisObj) {
	    var a = toArray(arr);
	    var i = a.length - 1;
	    for (; i > -1; i -= 1) {
	      callback.call(thisObj, a[i], i, arr);
	    }
	  },
	  intersect: function intersect(a, b) {
	    var result = [];
	    each(a, function (value) {
	      if (contains(b, value)) {
	        result.push(value);
	      }
	    });
	    return result;
	  },
	  range: function range(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = new Array(length);
	    for (var i = 0; i < length; i++, start += step) {
	      range[i] = start;
	    }
	    return range;
	  },
	  remove: function remove(arr, fromIndex, toIndex) {
	    var len = arr.length;
	    if (!numberUtils.isNumber(fromIndex)) {
	      return arr;
	    }
	    var rest = arr.slice((toIndex || fromIndex) + 1 || len);
	    arr.length = fromIndex < 0 ? len + fromIndex : fromIndex;
	    return arr.push.apply(arr, rest);
	  },
	  union: function union() {
	    var resultArr = [];
	    var sourceArrs = toArray(arguments);
	    each(sourceArrs, function (arr) {
	      resultArr = resultArr.concat(arr);
	    });
	    return uniq(resultArr);
	  }
	};
	
	module.exports = arrayUtils;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var toString = {}.toString;
	var isType = function isType(obj, type) {
	  return toString.call(obj) === '[object ' + type + ']';
	};
	
	var checkType = {
	  isType: isType,
	  isArguments: function isArguments(obj) {
	    return isType(obj, 'Arguments');
	  },
	  isArray: Array.isArray ? Array.isArray : function (obj) {
	    return isType(obj, 'Array');
	  },
	  isArrayLike: function isArrayLike(obj) {
	    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && isFinite(obj.length);
	  },
	  isBoolean: function isBoolean(obj) {
	    return isType(obj, 'Boolean');
	  },
	  isDate: function isDate(obj) {
	    return isType(obj, 'Date');
	  },
	  isError: function isError(obj) {
	    return isType(obj, 'Error');
	  },
	  isFunction: function isFunction(obj) {
	    return isType(obj, 'Function');
	  },
	  isNull: function isNull(obj) {
	    return obj === null;
	  },
	  isNumber: function isNumber(obj) {
	    return isType(obj, 'Number');
	  },
	  isPlainObject: function isPlainObject(obj) {
	    return isType(obj, 'Object');
	  },
	  isRegExp: function isRegExp(obj) {
	    return isType(obj, 'RegExp');
	  },
	  isString: function isString(obj) {
	    return isType(obj, 'String');
	  },
	  isUndefined: function isUndefined(obj) {
	    return obj === undefined;
	  },
	  getType: function getType(obj) {
	    var typeStr = toString.call(obj);
	    return typeStr.replace(/^\[object /, '').replace(/\]$/, '');
	  },
	  isObject: function isObject(obj) {
	    var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
	    return type === 'function' || type === 'object' && !!obj;
	  }
	};
	
	checkType.isNil = function (obj) {
	  return checkType.isNull(obj) || checkType.isUndefined(obj);
	};
	
	module.exports = checkType;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var checkType = __webpack_require__(2);
	var isNumber = checkType.isNumber;
	var nativeMin = Math.min;
	var nativeMax = Math.max;
	
	var numberUtils = {
	  isFinite: isFinite,
	  isNaN: isNaN,
	  isNumber: isNumber,
	  isDecimal: function isDecimal(num) {
	    return isNumber(num) && num % 1 !== 0;
	  },
	  isEven: function isEven(num) {
	    return isNumber(num) && num % 2 === 0;
	  },
	  isInteger: Number.isInteger ? Number.isInteger : function (num) {
	    return isNumber(num) && num % 1 === 0;
	  },
	  isNegative: function isNegative(num) {
	    return isNumber(num) && num < 0;
	  },
	  isOdd: function isOdd(num) {
	    return isNumber(num) && num % 2 !== 0;
	  },
	  isPositive: function isPositive(num) {
	    return isNumber(num) && num > 0;
	  },
	  toFloat: function toFloat(str) {
	    return parseFloat(str);
	  },
	  toInteger: function toInteger(str, radix) {
	    return parseInt(str, radix || 10);
	  },
	  isInRange: function isInRange(value, start, end) {
	    start = +start || 0;
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = +end || 0;
	    }
	    return value >= nativeMin(start, end) && value < nativeMax(start, end);
	  }
	};
	
	numberUtils.isInFinite = function (num) {
	  return !numberUtils.isFinite(num);
	};
	
	module.exports = numberUtils;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var undefStr = 'undefined';
	
	var result = {};
	
	if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== undefStr) {
	  result = window;
	} else if ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) !== undefStr) {
	  result = global;
	} else if ((typeof self === 'undefined' ? 'undefined' : _typeof(self)) !== undefStr) {
	  result = self;
	}
	
	module.exports = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var checkType = __webpack_require__(2);
	var getType = checkType.getType;
	var isFunction = checkType.isFunction;
	var isObject = checkType.isObject;
	var isPlainObject = checkType.isPlainObject;
	
	var arrayUtils = __webpack_require__(1);
	var contains = arrayUtils.contains;
	var each = arrayUtils.each;
	var isArrayLike = arrayUtils.isArrayLike;
	var toArray = arrayUtils.toArray;
	
	function toPlainObject(obj) {
	  return isPlainObject(obj) ? obj : {};
	}
	function forIn(obj, callback, thisObj) {
	  var plainObj = toPlainObject(obj);
	  for (var key in plainObj) {
	    if ({}.hasOwnProperty.call(plainObj, key)) {
	      callback.call(thisObj, plainObj[key], key, obj);
	    }
	  }
	}
	
	var keys = Object.keys ? function (obj) {
	  return Object.keys(obj);
	} : function (obj) {
	  var result = [];
	  forIn(obj, function (value, key) {
	    if (!(isFunction(obj) && key === 'prototype')) {
	      result.push(key);
	    }
	  });
	  return result;
	};
	
	function values(obj) {
	  var result = [];
	  forIn(obj, function (value) {
	    result.push(value);
	  });
	  return result;
	}
	
	function extend(dest) {
	  dest = dest || {};
	  each(toArray(arguments).slice(1), function (source) {
	    if (source) {
	      forIn(source, function (value, key) {
	        dest[key] = source[key];
	      });
	    }
	  });
	  return dest;
	}
	
	function merge(dest) {
	  dest = dest || {};
	  each(toArray(arguments).slice(1), function (source) {
	    forIn(source, function (value, prop) {
	      if (getType(source[prop]) !== getType(dest[prop])) {
	        if (isPlainObject(source[prop])) {
	          dest[prop] = {};
	          merge(dest[prop], source[prop]);
	        } else {
	          dest[prop] = source[prop];
	        }
	      } else {
	        if (isPlainObject(source[prop])) {
	          merge(dest[prop], source[prop]);
	        } else {
	          dest[prop] = source[prop];
	        }
	      }
	    });
	  });
	  return dest;
	}
	
	var objectUtils = {
	  extend: extend,
	  forIn: forIn,
	  isObject: isObject,
	  isPlainObject: isPlainObject,
	  keys: keys,
	  merge: merge,
	  values: values,
	  assign: extend,
	  hasKey: function hasKey(obj, key) {
	    return {}.hasOwnProperty.call(obj, key);
	  },
	
	  hasValue: function hasValue(obj, value) {
	    return contains(values(obj), value);
	  },
	  invert: function invert(obj) {
	    var result = {};
	    forIn(obj, function (value, key) {
	      result[value] = key;
	    });
	    return result;
	  },
	  clone: function clone(obj) {
	    if (isArrayLike(obj)) {
	      return toArray(obj);
	    }
	    if (isPlainObject(obj)) {
	      return merge({}, obj);
	    }
	    return obj;
	  },
	  destroy: function destroy(obj) {
	    forIn(obj, function (value, key) {
	      delete obj[key];
	    });
	    obj.prototype = null;
	    obj = null;
	  }
	};
	
	module.exports = objectUtils;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var checkType = __webpack_require__(2);
	
	var isString = checkType.isString;
	var stringPrototype = String.prototype;
	
	function toString(a) {
	  return a.toString();
	}
	
	var stringUtils = {
	  isString: isString,
	  trim: function trim(str) {
	    str = toString(str);
	    return stringPrototype.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	  },
	  trimLeft: function trimLeft(str) {
	    str = toString(str);
	    return stringPrototype.trimLeft ? str.trimLeft() : str.replace(/^\s+/g, '');
	  },
	  trimRight: function trimRight(str) {
	    str = toString(str);
	    return stringPrototype.trimRight ? str.trimRight() : str.replace(/^\s+/g, '');
	  },
	  lc: function lc(str) {
	    return toString(str).toLowerCase();
	  },
	  uc: function uc(str) {
	    return toString(str).toUpperCase();
	  },
	  hasSubString: function hasSubString(str, subStr) {
	    return toString(str).indexOf(toString(subStr)) > -1;
	  }
	};
	
	module.exports = stringUtils;

/***/ }
/******/ ]);
//# sourceMappingURL=index.js.map