var zeroLang =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = chai.assert;
	var lang = __webpack_require__(7);
	
	mocha.setup('bdd');
	
	describe('lang', function () {
	  it('exists', function () {
	    assert.typeOf(lang, 'object');
	  });
	});
	
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	
	mocha.run();

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ function(module, exports) {

	module.exports = zeroLang;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	describe('zero-lang/array', function () {
	  var indexOf = zeroLang.index(true);
	  var lastIndexOf = zeroLang.index(false);
	  var arrA = void 0;
	  var arrB = void 0;
	
	  beforeEach(function () {
	    arrA = [1, 2, 3, 3, 4, 4, 4, 5];
	    arrB = [];
	  });
	
	  it('zeroLang.indexOf(arr, searchElement, fromIndex)', function () {
	    expect(indexOf(arrA, 1)).to.equal(0);
	    expect(indexOf(arrA, 4)).to.equal(4);
	    expect(indexOf(arrA, 5)).to.equal(7);
	    expect(indexOf(arrA, 6)).to.equal(-1);
	  });
	
	  it('zeroLang.lastIndexOf(arr, searchElement, fromIndex)', function () {
	    expect(lastIndexOf(arrA, 5)).to.equal(7);
	    expect(lastIndexOf(arrA, 3)).to.equal(3);
	    expect(lastIndexOf(arrA, 2)).to.equal(1);
	    expect(lastIndexOf(arrA, 6)).to.equal(-1);
	  });
	  it('zeroLang.forEach(obj, callback, thisObj)', function () {
	    zeroLang.forEach(arrA, function (a) {
	      a += 0;
	      arrB.push(a);
	    });
	    expect(arrB).to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
	    arrB = [];
	    zeroLang.forEach(arrA, function (a) {
	      a += 1;
	      arrB.push(a);
	    });
	    expect(arrB).to.deep.equal([2, 3, 4, 4, 5, 5, 5, 6]);
	  });
	  it('zeroLang.every(obj, callback, thisObj)', function () {
	    // alias
	    expect(zeroLang.every(arrA, function (item) {
	      return item === 4;
	    })).to.equal(false);
	  });
	  it('zeroLang.some(obj, callback, thisObj)', function () {
	    // alias
	    expect(zeroLang.some(arrA, function (item) {
	      return item === 4;
	    })).to.equal(true);
	  });
	  it('zeroLang.each(obj, callback, thisObj)', function () {
	    // alias
	    zeroLang.each(arrA, function (a) {
	      a += 0;
	      arrB.push(a);
	    });
	    expect(arrB).to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
	    arrB = [];
	    zeroLang.each(arrA, function (a) {
	      a += 1;
	      arrB.push(a);
	    });
	    expect(arrB).to.deep.equal([2, 3, 4, 4, 5, 5, 5, 6]);
	  });
	  it('zeroLang.remove(arr, fromIndex, toIndex)', function () {
	    zeroLang.remove(arrA, 0, 2);
	    expect(arrA).to.deep.equal([3, 4, 4, 4, 5]);
	    zeroLang.remove(arrA, 0);
	    expect(arrA).to.deep.equal([4, 4, 4, 5]);
	    zeroLang.remove(arrA, 0, -1);
	    expect(arrA).to.deep.equal([]);
	  });
	  it('CANNOT use zeroLang.remove() inside of zeroLang.each() callback to THE SAME ARRAY', function () {
	    zeroLang.each(arrA, function (num, i) {
	      if (num === 4) {
	        zeroLang.remove(arrA, i);
	      }
	    });
	    expect(arrA).not.to.deep.equal([1, 2, 3, 3, 5]);
	    expect(arrA).not.to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
	    expect(arrA).to.deep.equal([1, 2, 3, 3, 4, 5]); // !!!!!!!!!! REMEMBER THIS !!!!!!!!!!
	  });
	});

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/* globals hello */
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	describe('zero-lang/global', function () {
	  it('exists', function () {
	    expect(_typeof(zeroLang.global)).to.equal('object');
	  });
	  it('works', function () {
	    zeroLang.global.hello = 'world';
	    expect(hello).to.equal('world');
	  });
	});

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	describe('zero-lang/number', function () {
	  it('zeroLang.isDecimal', function () {
	    expect(zeroLang.isDecimal(1)).to.equal(false);
	    expect(zeroLang.isDecimal(1.1)).to.equal(true);
	    expect(zeroLang.isDecimal('1')).to.equal(false);
	  });
	  it('zeroLang.isEven', function () {
	    // 偶数
	    expect(zeroLang.isEven(1)).to.equal(false);
	    expect(zeroLang.isEven(20)).to.equal(true);
	    expect(zeroLang.isEven(0)).to.equal(true);
	    expect(zeroLang.isEven('1')).to.equal(false);
	  });
	  it('zeroLang.isOdd', function () {
	    // 奇数
	    expect(zeroLang.isOdd(1)).to.equal(true);
	    expect(zeroLang.isOdd(20)).to.equal(false);
	    expect(zeroLang.isOdd(0)).to.equal(false);
	    expect(zeroLang.isOdd('1')).to.equal(false);
	  });
	  it('zeroLang.isInteger', function () {
	    expect(zeroLang.isInteger(1)).to.equal(true);
	    expect(zeroLang.isInteger(20.1)).to.equal(false);
	    expect(zeroLang.isInteger(0.0)).to.equal(true);
	    expect(zeroLang.isInteger('1')).to.equal(false);
	  });
	  it('zeroLang.isNegative', function () {
	    expect(zeroLang.isNegative(1)).to.equal(false);
	    expect(zeroLang.isNegative(-20.1)).to.equal(true);
	    expect(zeroLang.isNegative(0.0)).to.equal(false);
	    expect(zeroLang.isNegative('1')).to.equal(false);
	  });
	  it('zeroLang.isPositive', function () {
	    expect(zeroLang.isPositive(1)).to.equal(true);
	    expect(zeroLang.isPositive(-20.1)).to.equal(false);
	    expect(zeroLang.isPositive(0.0)).to.equal(false);
	    expect(zeroLang.isPositive('1')).to.equal(false);
	  });
	  it('zeroLang.isNumber', function () {
	    expect(zeroLang.isNumber(NaN)).to.equal(true);
	    expect(zeroLang.isNumber(1)).to.equal(true);
	    expect(zeroLang.isNumber('1')).to.equal(false);
	  });
	  it('zeroLang.isInRange', function () {
	    var falsey = [undefined, '', 0, false, NaN, null, undefined];
	    expect(zeroLang.isInRange(3, 5)).to.equal(true);
	    expect(zeroLang.isInRange(5, 5)).to.equal(false);
	    expect(zeroLang.isInRange(6, 5)).to.equal(false);
	    expect(zeroLang.isInRange(5.2, 5)).to.equal(false);
	    expect(zeroLang.isInRange(0.5, 5)).to.equal(true);
	    expect(zeroLang.isInRange(1, 1, 5)).to.equal(true);
	    expect(zeroLang.isInRange(3, 1, 5)).to.equal(true);
	    expect(zeroLang.isInRange(0, 1, 5)).to.equal(false);
	    expect(zeroLang.isInRange(5, 1, 5)).to.equal(false);
	    expect(zeroLang.isInRange(1.2, 1, 5)).to.equal(true);
	    expect(zeroLang.isInRange(0.5, 1, 5)).to.equal(false);
	    expect(zeroLang.isInRange(2, 5, 1)).to.equal(true);
	    expect(zeroLang.isInRange(-3, -2, -6)).to.equal(true);
	    zeroLang.each(falsey, function (value, index) {
	      if (index) {
	        expect(zeroLang.isInRange(0, value)).to.equal(false);
	        expect(zeroLang.isInRange(0, value, 1)).to.equal(true);
	      } else {
	        expect(zeroLang.isInRange(0)).to.equal(false);
	      }
	    });
	  });
	});

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	describe('zero-lang/object', function () {
	  var obj = {
	    foo: 'bar',
	    hoo: 'goo'
	  };
	  it('delete in zeroLang.forIn()', function () {
	    zeroLang.forIn(obj, function (value, key) {
	      if (value === 'bar') {
	        delete obj[key];
	      }
	    });
	    expect(obj).to.deep.equal({ // !!!!!!!!!! REMEMBER THIS !!!!!!!!!!
	      hoo: 'goo'
	    });
	  });
	
	  var destObj1 = {};
	  var destObj2 = {};
	  var obj1 = {
	    hello: 'world'
	  };
	  var obj2 = {
	    foo: 'bar',
	    bar: {
	      hi: 'hello',
	      woo: 'weee',
	      wee: {
	        hoo: 'gee',
	        hi: 'hi'
	      }
	    }
	  };
	  var obj3 = {
	    foo: 'too',
	    bar: {
	      woo: 'waaa',
	      wee: {
	        hi: 'hoo'
	      }
	    },
	    hello: ['world', 'html', 'object']
	  };
	  zeroLang.merge(destObj1, obj1, obj2, obj3);
	  it('zeroLang.merge(dest)', function () {
	    // 深度合并
	    // expect(destObj1.hello).to.equal('world');
	    expect(destObj1.foo).to.equal('too');
	    expect(destObj1.bar.woo).to.equal('waaa');
	    expect(destObj1.bar.hi).to.equal('hello');
	    expect(destObj1.bar.wee.hoo).to.equal('gee');
	    expect(destObj1.bar.wee.hi).to.equal('hoo');
	    expect(destObj1.hello).to.deep.equal(['world', 'html', 'object']);
	    expect(Object.prototype.toString.call(destObj1.hello)).to.equal('[object Array]');
	  });
	  zeroLang.extend(destObj2, obj1, obj2, obj3);
	  it('zeroLang.extend(dest)', function () {
	    // 扩展
	    expect(destObj1.hello).to.deep.equal(['world', 'html', 'object']);
	    expect(destObj2.foo).to.equal('too');
	    expect(destObj2.bar.woo).to.equal('waaa');
	    expect(destObj2.bar.hi).to.equal(undefined);
	    expect(destObj2.bar.wee.hoo).to.equal(undefined);
	    expect(destObj2.bar.wee.hi).to.equal('hoo');
	  });
	
	  it('zeroLang.clone(dest)', function () {
	    expect(zeroLang.clone(obj2).bar).not.to.equal(obj2.bar);
	    expect(zeroLang.clone(obj2).bar).to.deep.equal(obj2.bar);
	  });
	
	  it('zeroLang.hasKey(obj, key)', function () {
	    expect(function () {
	      return zeroLang.hasKey(Object.create(null), 'some');
	    }).to.not.throw(Error);
	  });
	
	  it('zeroLang.invert(obj)', function () {
	    expect(zeroLang.invert(obj2.bar.wee)).to.deep.equal({
	      gee: 'hoo',
	      hi: 'hi'
	    });
	  });
	});

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	describe('zero-lang/string', function () {
	  it('zeroLang.isString', function () {
	    expect(zeroLang.isString('')).to.equal(true);
	  });
	  it('zeroLang.trim', function () {
	    expect(zeroLang.trim('  ')).to.equal('');
	    expect(zeroLang.trim('  a')).to.equal('a');
	    expect(zeroLang.trim('b  ')).to.equal('b');
	    expect(zeroLang.trim('b  a')).to.equal('b  a');
	  });
	  it('zeroLang.trimLeft', function () {
	    expect(zeroLang.trimLeft('  a')).to.equal('a');
	    expect(zeroLang.trimLeft('b  ')).to.equal('b  ');
	    expect(zeroLang.trimLeft('b  a')).to.equal('b  a');
	  });
	  it('zeroLang.trimRight', function () {
	    expect(zeroLang.trimRight('  a')).to.equal('  a');
	    expect(zeroLang.trimRight('b  ')).to.equal('b');
	    expect(zeroLang.trimRight('b  a')).to.equal('b  a');
	  });
	  it('zeroLang.hasSubString', function () {
	    expect(zeroLang.hasSubString('  a', 'a')).to.equal(true);
	    expect(zeroLang.hasSubString('b  ', 'a')).to.equal(false);
	    expect(zeroLang.hasSubString('b  a', 'b ')).to.equal(true);
	  });
	});

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _arguments = arguments;
	var zeroLang = __webpack_require__(7);
	var expect = chai.expect;
	
	function noop() {}
	
	describe('zero-lang/type', function () {
	  it('zeroLang.isArguments', function () {
	    expect(zeroLang.isArguments([])).to.equal(false);
	    expect(zeroLang.isArguments(_arguments)).to.equal(true);
	  });
	  it('zeroLang.isArray', function () {
	    expect(zeroLang.isArray([])).to.equal(true);
	    expect(zeroLang.isArray(1)).to.equal(false);
	  });
	  it('zeroLang.isBoolean', function () {
	    expect(zeroLang.isBoolean(true)).to.equal(true);
	    expect(zeroLang.isBoolean(false)).to.equal(true);
	    expect(zeroLang.isBoolean(1)).to.equal(false);
	  });
	  it('zeroLang.isFunction', function () {
	    expect(zeroLang.isFunction(noop)).to.equal(true);
	    expect(zeroLang.isFunction(1)).to.equal(false);
	  });
	  it('zeroLang.isNumber', function () {
	    expect(zeroLang.isNumber(NaN)).to.equal(true);
	    expect(zeroLang.isNumber(1)).to.equal(true);
	    expect(zeroLang.isNumber('1')).to.equal(false);
	  });
	  it('zeroLang.isObject', function () {
	    expect(zeroLang.isObject({})).to.equal(true);
	    expect(zeroLang.isObject(null)).to.equal(false);
	    expect(zeroLang.isObject(noop.prototype)).to.equal(true);
	    expect(zeroLang.isObject(noop)).to.equal(true);
	  });
	  it('zeroLang.isPlainObject', function () {
	    expect(zeroLang.isPlainObject({})).to.equal(true);
	    expect(zeroLang.isPlainObject(null)).to.equal(false);
	    expect(zeroLang.isPlainObject(noop.prototype)).to.equal(true);
	    expect(zeroLang.isPlainObject(noop)).to.equal(false);
	  });
	  it('zeroLang.isString', function () {
	    expect(zeroLang.isString('')).to.equal(true);
	  });
	  it('zeroLang.isError', function () {
	    expect(zeroLang.isError(new Error())).to.equal(true);
	  });
	  it('zeroLang.isDate', function () {
	    expect(zeroLang.isDate(new Date())).to.equal(true);
	  });
	  it('zeroLang.isRegExp', function () {
	    expect(zeroLang.isRegExp(/^..$/)).to.equal(true);
	  });
	  it('zeroLang.isNil', function () {
	    expect(zeroLang.isNil({})).to.equal(false);
	    expect(zeroLang.isNil(null)).to.equal(true);
	    expect(zeroLang.isNil()).to.equal(true);
	    expect(zeroLang.isNil(noop)).to.equal(false);
	  });
	});

/***/ }
/******/ ]);
//# sourceMappingURL=index.js.map